
$grid-breakpoint:null !default;
$grid-breakpoints:null !default;

// @function grid-breakpoints
@function grid-breakpoints($breakpoints...){
	$grid-breakpoints: compact(join($breakpoints, $grid-breakpoints));
	@return $grid-breakpoints;
}

// Breakpoint format is (handle grid-columns min max), ie. (four 4 0 6)
// @function grid-breakpoint-handle
// @param {String} The breakpoint handle. A list is assumed to be an actualy breakpoint.
@function grid-breakpoint($handle:null){
	@if($handle == null){
		@return $grid-breakpoint;
	}
	//Just in case a breakpoint was directly passed...
	@if(type-of($handle) == "list"){
		$grid-breakpoint: $handle;
		@return $handle;
	}
	//Find it by alias
	@each $breakpoint in grid-breakpoints() {
		@if($handle == nth($breakpoint, 1)){
			$grid-breakpoint: $breakpoint;
			@return $breakpoint;
		}
	}
	@return null;
}

// @function grid-breakpoint-handle
// @param {List|String} The breakpoint or breakpoint handle.
@function grid-breakpoint-handle($breakpoint: null){
	$breakpoint: grid-breakpoint($breakpoint);
	$handle: nth($breakpoint, 1);
	@if(type-of($handle) == "string"){
		@return $handle;
	}
	@return null;
}

// Returns the columns for a breakpoint.
// @function grid-breakpoint-columns
// @param {List|String} The breakpoint or breakpoint handle.
@function grid-breakpoint-columns($breakpoint: null){
	$breakpoint: grid-breakpoint($breakpoint);
	@if(type-of($breakpoint) == "list"){
		@for $i from 1 through 3 {
			$nth: nth($breakpoint, $i);
			@if(type-of($nth) == "number" and $nth > 0){
				@return $nth;
			}
		}
	}
	@return null;
}

// Returns the minimum columns that a breakpoint is visible at.
// @function grid-breakpoint-min
// @param {List|String} The breakpoint or breakpoint handle.
@function grid-breakpoint-min($breakpoint: null){
	$breakpoint: grid-breakpoint($breakpoint);
	
	$-offset: 0;	
	@if(type-of(nth($breakpoint, 1)) == "string"){
		//Skip handle index, if present
		$-offset: $-offset + 1;
	}
	
	$-idx: 2;
	@if(length($breakpoint) >= ($-offset + $-idx) and type-of(nth($breakpoint, ($-offset + $-idx))) == "number"){
		//Min specified
		@return nth($breakpoint, $-offset + $-idx);
	}
	
	@return grid-breakpoint-columns($breakpoint);
}


// Returns the maximum columns that a breakpoint is visible at.
// @function grid-breakpoint-max
// @param {List|String} The breakpoint or breakpoint handle.
@function grid-breakpoint-max($breakpoint: null){
	$breakpoint: grid-breakpoint($breakpoint);
	$-offset: 0;
	$-idx: 3;
	@if(type-of(nth($breakpoint, 1)) == "string"){
		//Skip handle index, if present
		$-offset: $-offset + 1;
	}
	@if(length($breakpoint) >= ($-offset + $-idx) and type-of(nth($breakpoint, ($-offset + $-idx))) == "number"){
		//Max specified
		@return nth($breakpoint, $-offset + $-idx);
	}
	@return 0;
}






// Returns the base selector scope for the breakpoint.
// @function grid-breakpoint-scope
// @param {List|String} The breakpoint or breakpoint handle.
// @return {Selector} The selector scope for a certain breakpoint.
@function grid-breakpoint-scope($breakpoint: null){
	$breakpoint: grid-breakpoint($breakpoint);
	$-last: nth($breakpoint, length($breakpoint));
	@if(type-of($-last) == "string"){
		@return $-last;
	}
	@return null;
}


// Add rules to a breakpoint. Changes to the global grid variables effective only in this context.
// @mixin grid-breakpoint
// @param $breakpoint {String|List} If a string, looks for a breakpoint in $grid-breakpoints with the same handle. If a list, it's considered a breakpoint.
// @param $media-query {Selector}
// @param $semantics {Boolean}
@mixin grid-breakpoint($breakpoint, $media-query:"all", $semantics: false){
	$-orig: $breakpoint;
	$-prev-breakpoint: $grid-breakpoint;
	$-breakpoint-handle: null;
	@if(type-of($breakpoint) == "string"){
		$-breakpoint-handle: $breakpoint;
		$breakpoint: grid-breakpoint($-breakpoint-handle);
	}@else {
		$-breakpoint-handle: grid-breakpoint-handle($breakpoint);
	}
	
	@if(type-of($breakpoint) != "list"){
		@warn "The following breakpoint is not valid: " + $-orig;
	}@else{
		
		$grid-breakpoint: $breakpoint; //set the global
		$-breakpoint-columns: grid-breakpoint-columns();
		$-breakpoint-min: grid-breakpoint-min();
		$-breakpoint-max: grid-breakpoint-max();
		$-breakpoint-scope: grid-breakpoint-scope();
		$-breakpoint-comment: "Display";
		
		@include grid($-breakpoint-columns){
	
			@if(type-of($-breakpoint-min) == "number" and $-breakpoint-min > 0){
				$-min-width: plus(container-width($-breakpoint-min), 1px);
				$media-query: $media-query + " and (min-width:"+ $-min-width +")";
				$-breakpoint-comment: $-breakpoint-comment + " from " + $-breakpoint-min + " columns";
			}
	
			@if(type-of($-breakpoint-max) == "number" and $-breakpoint-max > 0){
				$-max-width: container-width($-breakpoint-max);
				$media-query: $media-query + " and (max-width:"+ $-max-width +")";
				$-breakpoint-comment: $-breakpoint-comment + " to " + $-breakpoint-max + " columns";
			}
	
			@media #{$media-query} {
				/* ==== (#{$breakpoint}) ======================== 
						 #{$-breakpoint-comment}
				   ======================================== */
				//Add the semantics classes, if requested
				@if($semantics == true){
					@include grid-semantics();
				}@else if(type-of($semantics) == "string"){
					@include grid-semantics($prefix: $semantics);
				}
				
				@content;
				
			}
	
	
			@if($-breakpoint-scope != null){
				@warn "Breakpoint scopes do not work until this is resolved: https://github.com/nex3/sass/issues/286";
				#{$-breakpoint-scope} & {
					//Add the semantics classes, if requested
					@if($semantics == true){
						@include grid-semantics();
					}@else if(type-of($semantics) == "string"){
						@include grid-semantics($prefix: $semantics);
					}

					@content;
								
				}
		
		
			}
		
		}
		
		//Revert the global grid-breakpoint
		$grid-breakpoint: $-prev-breakpoint;
	}
	
}
