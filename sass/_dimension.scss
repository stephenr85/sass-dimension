// http://github.com/stephenr85/sass-dimension
// @category dimension
// @author Stephen Rushing, eSiteful 

$baseline: 16px !default;
$em-baseline: $baseline !default;
$px-per-inch: 96 !default;


// Removes the unit from a number.
// @function strip-unit
// @param $num {Number}
@function strip-unit($num){
	@return $num / ($num * 0 + 1);
}


//Convert a rem/em to a px, or ensure an rem value.
//If $dim is an rem or em value, it will be returned as-is, with an rem unit.
//If $dim is a px value, it will be converted to an rem.
//If $dim is a percentage, it is ignored and passed back.
// @function rem
// @param $dim {Number} An rem value.
@function rem($dim){
	$dims: -compass-list($dim);
	@if(type-of($dims) == "list" and length($dims) > 1){
		$rems: ();
		@each $value in $dim {
			$rems: append($rems, rem($value), space);
		}
		@return $rems;
		
	}@else if(unit($dim) == "rem" or unit($dim) == "em"){
		//Ensure rem unit
		@return strip-unit($dim) + 0rem;
	}@else if(unit($dim) == "%"){
		//Retain percentages
		@return $dim;
	}@else{				
		//Convert px to rem
		@return strip-unit($dim) / strip-unit($baseline) + 0rem;
	}	
}

// Prefer rem units, or use percentages for relative values. Sometimes em values are still viable, obviously, but you have to know the context.
// @function em
// @param $dim {Number}
// @param $baseline {Number} However many px = 1em, or the relative em of the current context. Defaults to global $baseline.
@function em($dim, $baseline: $baseline){	
	$dims: -compass-list($dim);
	@if(type-of($dim) == "list" and length($dims) > 1){
		$ems: ();
		@each $value in $dims {
			$ems: append($ems, em($value), space);
		}
		@return $ems;		
	}@else{
		$dim: px($dim);
		$baseline: px($baseline);
		@return strip-unit($dim / $baseline) + 0em;
	}
}




// Convert rem/em to px, or ensure a px value.
// @function px
// @param $dim
// @return {Number} A px value.
@function px($dim){
	$dims: -compass-list($dim);
	$dim: nth($dims, 1);
	
	@if(type-of($dims) == "list" and length($dims) > 1){
		$pxs: ();
		@each $value in $dims {
			$pxs: append($pxs, px($value));
		}
		@return $pxs;
		
	}@else if(unit($dim) == "rem"){
		//Convert rem to px
		@return strip-unit($dim) * px($baseline);	
	}@else if(unit($dim) == "em"){
		//Convert em to px
		@return strip-unit($dim) * px($em-baseline);
	}@else if(unit($dim) == "%"){
		//Retain percentages
		@return $dim;
	}@else{
		//Ensure px unit
		@return strip-unit($dim) + 0px;
	}	
}

// Convert arbitrary units to percentages. $dim and $context can be em, rem, or px values.
// @function percent
// @param $dim
// @param $context {Number} The total width for the calculation of the percentages.
// @return {Number} A % value.
// =percent(1.5em, 240px)
@function percent($dim, $context){
	$dims: -compass-list($dim);
	@if(type-of($dims) == "list" and length($dims) > 1){
		$percents: ();
		@each $value in $dims {
			$percents: append($percents, percent($value), space);
		}
		@return $percents;
		
	}@else if(unit($dim) == "rem" or unit($dim) == "em"){
		@return strip-unit(rem($dim) / rem($context)) * 100%;	
	}@else if(unit($dim) == "px"){
		@return strip-unit($dim / px($context)) * 100%;	
	}@else{
		//Ensure percent unit
		@return strip-unit($dim) + 0%;	
	}
}

//Relative to the pixels per inch, but provides a consistent mathmatical formula for converting other units to pts for print. 
//Totally untested with actual print at this point.
// @function pt
// @param $dim
// @param $px-per-inch Defaults to global $px-per-inch. 
// @return {Number} A pt value.
// =pt(20px)
@function pt($dim, $px-per-inch:$px-per-inch){
	$dims: -compass-list($dim);
	@if(type-of($dims) == "list" and length($dims) > 1){
		$pts: ();
		@each $value in $dims {
			$pts: append($pts, pts($value), space);
		}
		@return $pts;
		
	}@else if(unit($dim) == "pt"){
		@return $dim;
	}@else{
		//Convert to px, then pt
		$value: px($dim);
		@return strip-unit($value / px($px-per-inch)) + 0pt;	
	}
}



// Use rem units with px fallback
// Specify a px, em, or rem value with each property. Unitless values will be considered an rem.
// @mixin rem
// @param $properties...
// =rem(font-size 12px, line-height 1.4em)
@mixin rem($properties...){
	@each $property in $properties {
		$prop-name: nth($property, 1);
		$pxs:();
		$rems:();
		@for $i from 2 through length($property) {
			$value: nth($property, $i);
			@if(unit($value) == "px"){
				$pxs: append($pxs, $value, space);
				$rems: append($rems, rem($value), space);
			}@else{
				$pxs: append($pxs, strip-unit($value) * $baseline, space);
				$rems: append($rems, rem($value), space);		
			}
		}
		//Output
		#{$prop-name}: $pxs; /* px fallback for rem */
		#{$prop-name}: $rems;
	}
}


// Convert all dimensions to the same unit type. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin unity
// @param $dims...
@function unity($dims...){	
	@if(length($dims) > 1){
		$unified: ();
		@each $dim in $dims {
			$unified: append($unified, unity($dim));
		}
		@return $unified;
	}@else if(type-of(nth($dims, 1)) == "list"){
		$unified: ();
		@each $dim in nth($dims, 1) {
			$unified: append($unified, unity($dim));
		}
		@return $unified;
	}
	$unit: unit(nth($dims, 1));
	@if($unit == "em"){
		@return em(($dims));
	}@else if($unit == "rem"){
		@return rem(($dims));
	}@else if($unit == "pt"){
		@return pt(($dims));
	}
	@else if($unit == "px"){
		@return px(($dims));
	}
	@return $dims;
}

// Add dimensions together, normalizing them first. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin plus
// @param $dims...
@function plus($dims...){
	$dims: unity(-compass-list($dims));
	$total: 0;
	@each $dim in $dims {
		@if(unit($dim) != "%"){
			$total: $total + $dim;
		}
	}
	@return $total;
}


// Subtract dimensions, normalizing them first. Percentages are ignored. Convert them first with percent(), if necessary.
// @mixin minus
// @param $dims...
@function minus($dims...){
	$dims: unity(-compass-list($dims));
	$total: 0;
	@each $dim in $dims {
		@if(unit($dim) != "%"){
			$total: $total - $dim;
		}
	}
	@return $total;
}