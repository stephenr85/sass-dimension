@import "compass"; //need to be more specific
@import "../dimension";

$grid-width: auto !default;
$grid-columns: 12 !default;
$grid-column-width: 68px !default;
$grid-gutter-width: 16px !default;
$grid-unit: px !default; //Only relevant for static dimensions
$grid-style: static !default;
$grid-padding:1rem; //Use shorthand syntax for left/right, ie. $grid-padding: 0 1rem 0 .5rem;

// Convert any dimension to the unit preferred by the global $grid-unit.
// @function grid-unit
// @param $dim
@function grid-unit($dim){
	@return cast-unit($grid-unit, $dim);
}

// Calculate the static grid width for a number of columns.
// Unlike column-width() and gutter-width(), the global $grid-width is overridden if we have values for both $column-width and $gutter-width, to ensure a calculated value.
// @function grid-width
// @param {Number} $grid-columns Defaults to global $grid-columns.
@function grid-width($columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $padding: $grid-padding, $width: $grid-width, $unit: $grid-unit){
	$padding-width:0px;
	@if(type-of($padding) == "list"){
		$padding-width: plus($padding-width, nth($padding, 2));

		//Right padding
		@if(length($padding) >= 4){
			$padding-width: plus($padding-width, nth($padding, 4));
		}@else{
			$padding-width: plus($padding-width, nth($padding, 2));
		}
	}@else if(type-of($padding) == "number"){
		$padding-width: plus($padding-width, $padding);
	}
	
	@if($column-width != null and $column-width != auto and $column-width != null and $gutter-width != auto){
		//Calculate the width based on column and gutter widths.
		$cols-width: px($grid-columns * $column-width);
		$guts-width: px(($grid-columns - 1) * $gutter-width);
		$width: $cols-width + $guts-width;	
		$width: plus($width, $padding-width);		
		@return cast-unit($unit, $width);
			
	}@else if($grid-width != null and $grid-width != auto){
		//Use static grid-width value.
		$width: plus($grid-width, $padding-width);
		@return cast-unit($unit, $grid-width);
	}
	@return null;
		
}

// Calculate the static width of a single column with a given grid-width and gutter-width.
// @function column-width
// @param $grid-width
// @param $grid-columns
// @param $gutter-width
// @param $column-width {String} Defaults to global $column-width.
// @param $grid-unit
// =column-width(960px, 16, 10px)
@function column-width($grid-width: $grid-width, $grid-columns: $grid-columns, $gutter-width: $grid-gutter-width, $column-width: $grid-column-width, $unit: $grid-unit){
	@if($column-width != null and $column-width != auto){
		@return cast-unit($unit, $grid-column-width);
	}
	$gutter-width: gutter-width($grid-width: $grid-width, $grid-columns: $grid-columns, $gutter-width: $gutter-width, $unit: $unit);
	@return ($grid-width - ($gutter-width * ($grid-columns - 1))) / $grid-columns;
}

// Calculate the static width of a single gutter with a given grid-width and column-width.
// @function gutter-width
// @param $grid-width {Number} Defaults to global $grid-width, if it exists.
// @param $grid-columns {String} Defaults to global $grid-columns.
// @param $column-width {String} Defaults to global $column-width.
// @param $gutter-width {String} Defaults to global $gutter-width.
// @param $unit {String} Defaults to global $grid-unit.
@function gutter-width($grid-width: $grid-width, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@if($gutter-width != null and $gutter-width != auto){
		@return cast-unit($unit, $grid-gutter-width);
	}
	@return ($grid-width - ($column-width * $grid-columns)) / ($grid-columns - 1);
}



// Get the width of a number of columns, without gutters.
// @function columns
// @param $count {Number}
// @param $style {String} [fluid|static] Defaults to global $grid-style.
// @param $grid-columns {Number} Total number of columns. Defaults to global $grid-columns.
// @param $column-width {Number} Width of each column. Defaults to global $column-width.
// @param $gutter-width {Number} Defaults to global $gutter-width.
// @param $unit {String} The unit to use when calculating static dimensions. [px|rem] 
@function columns($count, $style: $grid-style, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@if($column-width == null or $column-width == "auto"){
		$column-width: column-width($grid-width: $grid-width, $grid-columns: $grid-columns, $gutter-width: $gutter-width, $unit: $unit);
	}
	@if($style == "fluid"){
		@return percent($column-width, grid-width($columns: $grid-columns, $column-width: $column-width, $padding: 0, $unit: $unit)) * $count;
	}@else{
		$cols: $count * $column-width; 
		@return cast-unit($unit, $cols);
	}
}

// Convenience function for calculating fluid columns.
// @function fluid-columns
@function fluid-columns($count, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@return columns($count, fluid, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit);
}

// Convenience function for calculating static column width.
// @function static-columns
@function static-columns($count, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@return columns($count, static, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit);
}


// Get the width of a number of gutters.
// @function gutters
// @param $count {Number}
// @param $style {String} [fluid|static]
// @param $grid-columns {Number} The totla number of columns. Defaults to global $grid-columns.
// @param $column-width {Number} The width of a single column in the grid. Defaults to global $column-width.
// @param $gutter-width {Number} The width of a single gutter in the grid. Defaults to global $gutter-width.
// @param $unit {String} The unit to use when calculating static dimensions. [px|em]
@function gutters($count, $style: $grid-style, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $grid-width: $grid-width, $unit: $grid-unit){
	@if($gutter-width == null or $gutter-width == "auto"){
		$gutter-width: gutter-width($grid-width: $grid-width, $grid-columns: $grid-columns, $column-width: $column-width, $unit: $unit);
	}
	@if($style == "fluid"){
		@return percent($gutter-width, grid-width($columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $padding: 0, $unit: $unit)) * $count;
	}@else{
		$gut: $count * $gutter-width;
		@return cast-unit($grid-unit, $gut);
	}
}

// Convenience function for calculating fluid gutters.
// @function fluid-gutters
@function fluid-gutters($count, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@return gutters($count, fluid, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit);
}

// Convenience function for calculating static gutters.
// @function static-gutters
@function static-gutters($count, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	@return gutters($count, static, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit);
}


// @function span
// @param $count {Number}
// @param $style {String} [fluid|static]
// @param $grid-columns {Number} Defaults to global $grid-columns.
// @param $grid-unit {String} Defaults to $grid-unit.
@function span($count, $style: $grid-style, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit){
	$cols: columns($count: $count, $style: $style, $grid-columns: $grid-columns, $unit: $unit);
	$guts: gutters($count: $count - 1, $style: $style, $grid-columns: $grid-columns, $unit: $unit);	
	@return $cols + $guts;
}

// Convenience function for fluid span.
// @function fluid-span
@function fluid-span($count, $grid-columns: $grid-columns, $grid-unit: $grid-unit){
	@return span($count, fluid, $grid-columns, $grid-unit);
}

// @mixin container
// @param $grid-columns {Number}
// @param $style {String} [fluid|static]
// @param $column-width {Number} 
// @param $gutter-width {Number}
// @param $grid-unit {String} [rem|px] Defaults to global $grid-unit.
// @param $semantics {Boolean|String} Calls grid-semantics(), using parameters as $prefix, if it is a string.
@mixin container($grid-columns: $grid-columns, $style:static, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $semantics: false){
	@include clearfix();
	width:100%;
	clear:both;
	float:none;
	margin-left:auto; 
	margin-right:auto;
	
	@if($style == "fluid"){
		//do nothing?
	}@else if($grid-unit == "rem"){		
		@include rem(max-width grid-width($grid-columns, $unit: $unit));
	}@else{
		max-width: px(grid-width($grid-columns, $unit: $unit));
	}
	//Add the semantics classes, if requested
	@if($semantics == true){
		@include grid-semantics($grid-columns: $grid-columns, $unit: $unit);
	}@else if(type-of($semantics) == "string"){
		@include grid-semantics($grid-columns: $grid-columns, $unit: $unit, $prefix: $semantics);
	}
}

// Convenience method for fluid containers. Fluid containers are often easier with nesting.
// @mixin fluid-container
// @param $span {Number} Defaults to $grid-columns
// @param $column-width {Number} Defaults to $column-width
// @param $gutter-width {Number} Defaults to global $gutter-width
// @param $unit {String} [rem|px]
// @param $semantics {Boolean|String} 
@mixin fluid-container($span: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $semantics: false){
	@include container($grid-columns: $span, $style: fluid, $unit: $unit, $semantics: $semantics);
}

// Create a container that spans a range of columns.
// @mixin flux-container
// @param $min-span {Number} Defaults to 1.
// @param $max-span {Number} Defaults to global $grid-columns.
// @param $grid-columns {Number} Defaults to global $grid-columns.
// @param $column-width {Number} Defaults to global $column-width.
// @param $gutter-width {Number} Defaults to global $gutter-width.
// @param $unit {String} [rem|px] Defaults to global $grid-unit.
// @param $semantics {Boolean|String}
@mixin flux-container($min-span: 1, $max-span: $grid-columns, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $semantics: false){
	@include container($grid-columns: $max-span, $style: fluid, $unit: $unit, $semantics: $semantics);
	@include span-limit($min-span, $max-span);
}


// Basic mixin for a row.
// @mixin row
@mixin row(){
	clear:both; float:left; width:100%; margin:0;
}

// @mixin columns
// @param $span {Number}
// @param $grid-columns {Number} Defaults to global $grid-columns.
// @param $style [static|fluid] Defaults to global $grid-style.
// @param $column-width {Number} Defaults to global $column-width.
// @param $gutter-width {Number} Defaults to global $gutter-width.
// @param $unit [rem|px] Defaults to global $grid-unit.
// @param $semantics {Boolean|String} Adds &.omega, &.fluid, &.static, &.collapse classes for semantic markup. Pass a string to prefix the semantic classes.
@mixin columns($span: null, $grid-columns: $grid-columns, $style: $grid-style, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $semantics: false){
	float:left;
	width: 100%;
	margin-right: gutters(1, $style: $style, $grid-columns: $grid-columns, $unit: $unit);
	margin-bottom: gutters(1, $style: static, $grid-columns: $grid-columns, $unit: $unit);
	
	@if($span != null){
		$max-width: span($count: $span, $style: $style, $grid-columns: $grid-columns, $unit: $unit);
	
		@if($style == "static" and $unit == "rem"){
			@include rem(max-width $max-width);
		}@else{
			max-width: $max-width;
		}
	}
	
	@if($semantics != false){
		@include column-semantics($span: $span, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit, $prefix: $semantics);
	}	
}

// Creates a fluid column
// @mixin fluid-column()	
// @param $span {Number}
// @param $column-width {Number}
// @param $gutter-width {Number}
// @param $grid-columns {Number}
// @param $unit {String} [rem|px]
// @param $semantics {Boolean}
@mixin fluid-columns($span: 1, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width:$gutter-width, $unit: $grid-unit, $semantics: false){
	@include columns($span: $span, $grid-columns: $grid-columns, $unit: $unit, $semantics: $semantics);
}

// Creates a static column
// @mixin static-column()	
// @param $span {Number}
// @param $column-width {Number}
// @param $gutter-width {Number}
// @param $grid-columns {Number}
// @param $unit {String} [rem|px]
// @param $semantics {Boolean}
@mixin static-columns($span: 1, $grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width:$gutter-width, $unit: $grid-unit, $semantics: false){
	@include columns($span: $span, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit, $semantics: $semantics);
}



// Use for the last element of a row. Basically floats right and removes right margin.
// @mixin omega
// =.column {
//		&:nth-of-type(3n) {
//			@include omega;
//		}
//	}
@mixin omega(){
	float:right;
	margin-right:0;
}

// Convenience function for omegas.
// @mixin nth-omega
// @param $nth
// @param $of-type {Boolean} [true] When false, uses nth-child instead of nth-of-type.
// =.column {
//		@include nth-omega(3n);
//	}
@mixin nth-omega($nth, $of-type: true){
	@if($of-type != true){
		&:nth-of-type(#{$nth}) {
			@include omega;
		}
	}@else{
		&:nth-child(#{$nth}){
			@include omega;
		}
	}
}



// Add min-width and max-width for a column range.
// @mixin span-limit
// @param $min-columns
// @param $max-columns
// =#container {		
//		@include span-limit	(4, 12);
//		width:100%;
//	}
@mixin span-limit($min-columns:null, $max-columns:null, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width){
	@if($min-columns != null){
		$min-width: span($min-columns, $column-width: $column-width, $gutter-width: $gutter-width);
		@if(unit($min-width) == "rem"){
			@include rem(min-width $min-width);
		}@else{
			min-width: $min-width;
		}
	}@else{
		min-width: 0;
	}
	
	@if($max-columns != null){
		$max-width: span($max-columns, $column-width: $column-width, $gutter-width: $gutter-width);
		@if(unit($max-width) == "rem"){
			@include rem(max-width $max-width);
		}@else{
			max-width: $max-width;
		}
		width:100%;
	}@else{
		max-width:none;
	}
	
	
}





// @mixin grid
// @param $columns {Number} Defaults to global $grid-columns.
// @param $style {String} [static|fluid] Defaults to global $grid-style.
// @param $column-width {Number} Defaults to global $column-width.
// @param $gutter-width {Number} Defaults to global $gutter-width.
// @param $padding {Number} Defaults to global $grid-padding.
// @param $width {Number} Defaults to global $grid-width, if column and gutter widths aren't set.
// @param $unit {String} Defaults to global $grid-unit.
// @param $scope {Selector} Scope these styles to a class rather than a media query.
// @param $semantics {Boolean|String} If true, calls mixin grid-semantics() with the given grid parameters. A string is used as the $prefix parameter for grid-semantics().
@mixin grid($columns, $style: $grid-style, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $padding: $grid-padding, $width: $grid-width, $unit: $grid-unit, $scope:null, $semantics: false){
	//Cache globals
	$prev-grid-columns: $grid-columns;
	$prev-grid-style: $grid-style;
	$prev-column-width: $grid-column-width;
	$prev-gutter-width: $grid-gutter-width;
	$prev-grid-padding: $grid-padding;
	$prev-grid-width: $grid-width;	
	$prev-grid-unit: $grid-unit;
	
	//Redefine globals
	
	// Instruct to use functions for these values rather than variable references, ie. grid-width(), column-width(), and gutter-width() 
	//@if($width == null or $width == auto){
	//	$width: grid-width($columns: $columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit);
	//}@else if($column-width == null or $column-width == auto){
	//	$column-width: column-width($grid-width: $width, $grid-columns: $columns, $gutter-width: $gutter-width)
	//}@else if($gutter-width == null or $gutter-width == auto){
	//	$gutter-width: gutter-width($grid-width: $width, $grid-columns: $columns, $column-width: $column-width);
	//}
	
	
	$grid-columns: $columns;
	$grid-column-width: $column-width;
	$grid-gutter-width: $gutter-width;	
	$grid-width: $width;
	$grid-style: $style;
	
	$grid-padding: $padding;	
	$grid-unit: $unit;
	
	@content;
	
	//Revert globals
	$grid-columns: $prev-grid-columns;
	$grid-style: $prev-grid-style;
	$grid-column-width: $prev-column-width;
	$grid-gutter-width: $prev-gutter-width;
	$grid-width: $prev-grid-width;
	$grid-padding: $prev-grid-padding;	
	$grid-unit: $prev-grid-unit;	
}



