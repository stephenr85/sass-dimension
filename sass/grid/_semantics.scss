
// @mixin grid-semantics
// @param $grid-unit {Number} Defaults to global $grid-unit.
// @param $prefix {String} A string to prefix the classes with (ie. "small", "medium", "large")
@mixin grid-semantics($grid-columns: $grid-columns, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $prefix: null){
	@if($prefix == null){
		$prefix: true; //Used for $prefix parameter in called mixins.
	}
	$container-selector:"container";
	@if(type-of($prefix) == "string"){
		$container-selector: $prefix+"-"+$container-selector;
	}
	#{"."+$container-selector} {
		@include container;
	}
	
	$row-selector: "row";
	@if(type-of($prefix) == "string"){
		$row-selector: $prefix+"-"+$row-selector;
	}
	#{"."+$row-selector} {
		@include row;
		> .col {
			&:last-child,
			&[class*="span"]:last-child,
			 {
				@include omega;
			}			
		}
	}
	
	$omega-selector: "omega";
	@if(type-of($prefix) == "string"){
		$omega-selector: $prefix + "-" + $omega-selector;
	}
	#{"."+$omega-selector} {
		&,
		.fluid &,
		.static & {
			@include omega;
		}
	}
	
	$col-selector: "col";
	@if(type-of($prefix) == "string"){
		$col-selector: $prefix + "-" + $col-selector;		
	}
	#{"."+$col-selector} {		
		@include columns(1, $grid-columns: $grid-columns, $semantics: $prefix);
		&:last-child,
		&[class*="span"]:last-child {
			@include omega;
		}
	}
	@for $i from 1 through $grid-columns {
		$col-selector:"span" + $i;
		@if(type-of($prefix) == "string"){
			$col-selector: $prefix + "-" + $col-selector;
		}
		#{"."+$col-selector} {
			@include columns($span: $i, $grid-columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit, $semantics: $prefix);
		}
		
	}
}


// Adds .fluid, .static, and .omega classes.
// @mixin column-semantics
// @param $grid-columns {Number}
// @param $style {String} [static|fluid]
// @param $column-width {Number}
// @param $gutter-width {Number}
// @param $unit {String}
// @param $prefix {String}
@mixin column-semantics($span, $grid-columns: $grid-columns, $style: $grid-style, $column-width: $grid-column-width, $gutter-width: $grid-gutter-width, $unit: $grid-unit, $prefix: null) {
	
	@include grid($columns: $grid-columns, $column-width: $column-width, $gutter-width: $gutter-width, $unit: $unit){
	
		$omega-selector: "omega";
		@if(type-of($prefix) == "string"){
			$omega-selector: $prefix+"-"+$omega-selector;
		}
		#{"&."+$omega-selector} {
			@include omega;
		}
	
		$static-selector: "static";
		@if(type-of($prefix) == "string"){
			$static-selector: $prefix+"-"+$static-selector;
		}
		#{"."+$static-selector} &,
		#{"&."+$static-selector} {
			$max-width: span($count: $span, $style: static);
			@if($unit == "rem"){
				@include rem(max-width $max-width);
			}@else{
				max-width: $max-width;
			}
			margin-right: gutters($count: 1, $style: static);
		}
	
		$fluid-selector: "fluid";
		@if(type-of($prefix) == "string"){
			$fluid-selector: $prefix+"-"+$fluid-selector;			
		}
		#{"." + $fluid-selector} &,
		#{"&." + $fluid-selector} {
			$max-width: span($count: $span, $style: fluid);
			@if($unit == "rem"){
				@include rem(max-width $max-width);
			}@else{
				max-width: $max-width;
			}
			margin-right: gutters($count: 1, $style: fluid);
		}
	
		$collapse-selector: "collapse";
		@if(type-of($prefix) == "string"){
			$collapse-selector: $prefix+"-"+$collapse-selector;
		}
		#{"&."+$collapse-selector} {
			margin:0;
		}
		
	}
	
}